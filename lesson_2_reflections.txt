What happens when you create new repository and why should you?
You create a new repository when you want to add version control and git tracking
to the given directory (/project).
Until you do, git doesn't know to track the given folder. When you do, it sets up the neccessary
folder structure (/.git) and processes (?) to do so.

Why do you need a staging area?
The staging area contains the files that you want to track and make part of the 
NEXT commit. Not all files need to be added to the staging area, allowing each commit
to contain only logical changes.
The key thing to remember here is that the repository doesn't contain
these changes YET. The working directory contains all files.

How can you use the staging area to make sure you have one logical change per commit
Say you've made several changes to your project files, each representing some
logical change in the code. Now, instead of having to save all these changes as a
single commit, the staging area allows you to add only the files needed for a logical
change, commit and then redo the process for the other files representing the
next logical change

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?
Branches could help when you want to work on new features that you don't want
as part of the main project (or master branch) as it's still not ready, not the main
focus, etc. Branches would allow one to work on these features in parallel and
then when it's finally ready, it can be "merged" back with the master branch

How do diagrams help you visualize branch structure?
The history of a repository having more than one branch resembles a tree structure.
Apart from the obvious benefit of providing a visual representation of the history,
the diagram also provides help in one additional way- with the concept of 'reachability'
Knowing which commits are 'reachable' from another in a repository is easily visualized
using the diagram.

What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?
A merging strategy is used to combine 2 branches together. When this is correctly done,
the changes in both branches are added together. The two branches now become one,
with the new branch having the same name as that of the branch that was checked out
before performing the merge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging works in cases where there is NO ambiguity. If there is any ambiguity at
all, it defers to the user; It's now your job to resolve it. 
Git is automatic when it can (better than always manual) and reverts to manual model when
it doesn't know how to merge. So it incorporates the best of both worlds.
